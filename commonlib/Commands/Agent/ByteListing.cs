/****************************************************************************************
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChainsAPM.Commands.Agent {
        public class ByteListing : Interfaces.ICommand<byte> {

                private Helpers.Fnv1a64 hashhelper;

                public DateTime TimeStamp { get; set; }
                public enum ILPlacement {
                        Enter = 00000001,
                        Exit = 00000002,
                        Offset = 00000003
                }

                public System.String MethodName { get; set; }
                public ILPlacement Placement { get; set; }
                public System.Int32 Offset { get; set; }
                public System.String PInvokeName { get; set; }
                public System.Byte PInvokeSig { get; set; }
                public System.String MethodHelperName { get; set; }
                public System.Byte MethodHelperSig { get; set; }
                public System.Byte MethodHelperIL { get; set; }
                public System.Byte InjectedIL { get; set; }
                public System.String ReferencedTypes { get; set; }
                public System.Int32 ReferencedTypeTokens { get; set; }

                public ByteListing () {

                }

                public ByteListing (System.Int64 timestamp, System.String _methodname, ILPlacement _placement, System.Int32 _offset, System.String _pinvokename, System.Byte _pinvokesig, System.String _methodhelpername, System.Byte _methodhelpersig, System.Byte _methodhelperil, System.Byte _injectedil, System.String _referencedtypes, System.Int32 _referencedtypetokens) {
                        TimeStamp = DateTime.FromFileTimeUtc (timestamp);
                        MethodName = _methodname;
                        Placement = _placement;
                        Offset = _offset;
                        PInvokeName = _pinvokename;
                        PInvokeSig = _pinvokesig;
                        MethodHelperName = _methodhelpername;
                        MethodHelperSig = _methodhelpersig;
                        MethodHelperIL = _methodhelperil;
                        InjectedIL = _injectedil;
                        ReferencedTypes = _referencedtypes;
                        ReferencedTypeTokens = _referencedtypetokens;
                }

                public string Name {
                        get { return "ByteListing"; }
                }
                public ushort Code {
                        get { return 0x0000; }
                }
                public string Description {
                        get { return "Update Command Description"; }
                }
                public Type CommandType {
                        get { return typeof (System.String); }
                }
                public Interfaces.ICommand<byte> Decode (ArraySegment<byte> input) {

                        if ( input.Count != 0 ) {
                                Helpers.ArraySegmentStream segstream = new Helpers.ArraySegmentStream (input);
                                int size = segstream.GetInt32 ();
                                if ( input.Count == size ) {
                                        short code = segstream.GetInt16 ();
                                        if ( code == Code ) {
                                                var timestamp = segstream.GetInt64 ();
                                                var stringlenMethodName = segstream.GetInt32 ();
                                                var decodeMethodNameHash = segstream.GetInt64 ();
                                                var decodeMethodName = segstream.GetUnicode (stringlenMethodName);


                                                var decodePlacement = (ILPlacement)segstream.GetInt32 ();


                                                var decodeOffset = segstream.GetInt32 ();


                                                var stringlenPInvokeName = segstream.GetInt32 ();
                                                var decodePInvokeNameHash = segstream.GetInt64 ();
                                                var decodePInvokeName = segstream.GetUnicode (stringlenPInvokeName);


                                                var decodePInvokeSig = segstream.GetByte ();


                                                var stringlenMethodHelperName = segstream.GetInt32 ();
                                                var decodeMethodHelperNameHash = segstream.GetInt64 ();
                                                var decodeMethodHelperName = segstream.GetUnicode (stringlenMethodHelperName);


                                                var decodeMethodHelperSig = segstream.GetByte ();


                                                var decodeMethodHelperIL = segstream.GetByte ();


                                                var decodeInjectedIL = segstream.GetByte ();


                                                var stringlenReferencedTypes = segstream.GetInt32 ();
                                                var decodeReferencedTypesHash = segstream.GetInt64 ();
                                                var decodeReferencedTypes = segstream.GetUnicode (stringlenReferencedTypes);


                                                var decodeReferencedTypeTokens = segstream.GetInt32 ();



                                                var term = segstream.GetInt16 ();

                                                if ( term != 0 ) {
                                                        throw new System.Runtime.Serialization.SerializationException ("Terminator is a non zero value. Please check the incoming byte stream for possible errors.");
                                                }
                                                return new ByteListing (timestamp, decodeMethodName, decodePlacement, decodeOffset, decodePInvokeName, decodePInvokeSig, decodeMethodHelperName, decodeMethodHelperSig, decodeMethodHelperIL, decodeInjectedIL, decodeReferencedTypes, decodeReferencedTypeTokens);
                                        } else {
                                                throw new System.Runtime.Serialization.SerializationException ("Invalid command code detected. Please check the incoming byte stream for possible errors.");
                                        }
                                } else {
                                        throw new System.Runtime.Serialization.SerializationException ("Size of message does not match size of byte stream. Please check the incoming byte stream for possible errors.");
                                }
                        } else {
                                throw new System.Runtime.Serialization.SerializationException ("Size of message is zero. Please check the incoming byte stream for possible errors. ");
                        }
                }
                public byte [] Encode () {
                        int byteSize = 0;
                        byteSize += 4; // Length Bytes
                        byteSize += 8; // Hash Bytes
                        byteSize += sizeof (MethodName).Length; // StringLength Bytes
                        byteSize += sizeof (Int32);
                        byteSize += sizeof (System.Int32);
                        byteSize += 4; // Length Bytes
                        byteSize += 8; // Hash Bytes
                        byteSize += sizeof (PInvokeName).Length; // StringLength Bytes
                        byteSize += sizeof (System.Byte);
                        byteSize += 4; // Length Bytes
                        byteSize += 8; // Hash Bytes
                        byteSize += sizeof (MethodHelperName).Length; // StringLength Bytes
                        byteSize += sizeof (System.Byte);
                        byteSize += sizeof (System.Byte);
                        byteSize += sizeof (System.Byte);
                        byteSize += 4; // Length Bytes
                        byteSize += 8; // Hash Bytes
                        byteSize += sizeof (ReferencedTypes).Length; // StringLength Bytes
                        byteSize += sizeof (System.Int32);
                        var buffer = new List<byte> (byteSize);
                        buffer.AddRange (BitConverter.GetBytes (byteSize)); // 4 bytes for size, 2 byte for code, 8 bytes for data, 8 bytes for data, 8 bytes for TS, 2 bytes for term
                        buffer.AddRange (BitConverter.GetBytes (Code));
                        buffer.AddRange (BitConverter.GetBytes (TimeStamp.ToFileTimeUtc ()));
                        var sBufferMethodName_item = System.Text.UnicodeEncoding.Unicode.GetBytes (MethodName_item);
                        buffer.AddRange (BitConverter.GetBytes (sBufferMethodName_item.Length));
                        buffer.AddRange (hashhelper.ComputeHash (sBufferMethodName_item));
                        buffer.AddRange (sBufferMethodName_item));
                        buffer.AddRange (BitConverter.GetBytes ((int)Placement));
                        buffer.AddRange (BitConverter.GetBytes (Offset));
                        var sBufferPInvokeName_item = System.Text.UnicodeEncoding.Unicode.GetBytes (PInvokeName_item);
                        buffer.AddRange (BitConverter.GetBytes (sBufferPInvokeName_item.Length));
                        buffer.AddRange (hashhelper.ComputeHash (sBufferPInvokeName_item));
                        buffer.AddRange (sBufferPInvokeName_item));
                        buffer.AddRange (BitConverter.GetBytes (PInvokeSig));
                        var sBufferMethodHelperName_item = System.Text.UnicodeEncoding.Unicode.GetBytes (MethodHelperName_item);
                        buffer.AddRange (BitConverter.GetBytes (sBufferMethodHelperName_item.Length));
                        buffer.AddRange (hashhelper.ComputeHash (sBufferMethodHelperName_item));
                        buffer.AddRange (sBufferMethodHelperName_item));
                        buffer.AddRange (BitConverter.GetBytes (MethodHelperSig));
                        buffer.AddRange (BitConverter.GetBytes (MethodHelperIL));
                        buffer.AddRange (BitConverter.GetBytes (InjectedIL));
                        var sBufferReferencedTypes_item = System.Text.UnicodeEncoding.Unicode.GetBytes (ReferencedTypes_item);
                        buffer.AddRange (BitConverter.GetBytes (sBufferReferencedTypes_item.Length));
                        buffer.AddRange (hashhelper.ComputeHash (sBufferReferencedTypes_item));
                        buffer.AddRange (sBufferReferencedTypes_item));
                        buffer.AddRange (BitConverter.GetBytes (ReferencedTypeTokens));
                        buffer.AddRange (BitConverter.GetBytes ((short)0));
                        return buffer.ToArray ();
                }
        }

}

