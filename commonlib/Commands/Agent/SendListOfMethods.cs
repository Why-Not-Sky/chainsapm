/****************************************************************************************
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChainsAPM.Commands.Agent {
        public class SendListOfMethods : Interfaces.ICommand<byte> {

                private Helpers.Fnv1a64 hashhelper;

                public DateTime TimeStamp { get; set; }
                [Flags]
                public enum MethodSettings {
                        Module = 0x00000001,
                        Assembly = 0x00000004,
                        Class = 0x00000008,
                        Method = 0x00000010,
                        Public = 0x00000020,
                        Private = 0x00000040,
                        Protected = 0x00000080,
                        Friend = 0x00000100,
                        HasSignature = 0x00000200
                }

                public List<MethodSettings> ListOfMethodSettings { get; set; }
                public List<System.String> ListOfMethods { get; set; }

                public SendListOfMethods () {
                        hashhelper = new Helpers.Fnv1a64 ();
                }

                public SendListOfMethods (System.Int64 timestamp, List<MethodSettings> _listofmethodsettings, List<System.String> _listofmethods) : this () {
                        TimeStamp = timestamp == 0 ? DateTime.Now : DateTime.FromFileTimeUtc (timestamp);
                        ListOfMethodSettings = _listofmethodsettings;
                        ListOfMethods = _listofmethods;
                }

                public string Name {
                        get { return "SendListOfMethods"; }
                }
                public ushort Code {
                        get { return 0x00c8; }
                }
                public string Description {
                        get { return "Update Command Description"; }
                }
                public Type CommandType {
                        get { return typeof (System.String); }
                }
                public Interfaces.ICommand<byte> Decode (ArraySegment<byte> input) {

                        if ( input.Count != 0 ) {
                                Helpers.ArraySegmentStream segstream = new Helpers.ArraySegmentStream (input);
                                int size = segstream.GetInt32 ();
                                if ( input.Count == size ) {
                                        short code = segstream.GetInt16 ();
                                        if ( code == Code ) {
                                                var timestamp = segstream.GetInt64 ();

                                                var numberOfListOfMethodSettings = segstream.GetInt32 ();
                                                var listOfListOfMethodSettings = new List<MethodSettings> ();
                                                for ( int iListOfMethodSettings = 0; iListOfMethodSettings < numberOfListOfMethodSettings; iListOfMethodSettings++ ) {
                                                        var decodeListOfMethodSettings = (MethodSettings)segstream.GetInt32 ();

                                                        listOfListOfMethodSettings.Add (decodeListOfMethodSettings);
                                                }


                                                var numberOfListOfMethods = segstream.GetInt32 ();
                                                var listOfListOfMethods = new List<System.String> ();
                                                for ( int iListOfMethods = 0; iListOfMethods < numberOfListOfMethods; iListOfMethods++ ) {
                                                        var stringlenListOfMethods = segstream.GetInt32 ();
                                                        var decodeListOfMethodsHash = segstream.GetInt64 ();
                                                        var decodeListOfMethods = segstream.GetUnicode (stringlenListOfMethods);

                                                        listOfListOfMethods.Add (decodeListOfMethods);
                                                }


                                                var term = segstream.GetInt16 ();

                                                if ( term != 0 ) {
                                                        throw new System.Runtime.Serialization.SerializationException ("Terminator is a non zero value. Please check the incoming byte stream for possible errors.");
                                                }
                                                return new SendListOfMethods (timestamp, listOfListOfMethodSettings, listOfListOfMethods);
                                        } else {
                                                throw new System.Runtime.Serialization.SerializationException ("Invalid command code detected. Please check the incoming byte stream for possible errors.");
                                        }
                                } else {
                                        throw new System.Runtime.Serialization.SerializationException ("Size of message does not match size of byte stream. Please check the incoming byte stream for possible errors.");
                                }
                        } else {
                                throw new System.Runtime.Serialization.SerializationException ("Size of message is zero. Please check the incoming byte stream for possible errors. ");
                        }
                }
                public byte [] Encode () {
                        int byteSize = 0;
                        byteSize += sizeof (Int32); // Length Of Command
                        byteSize += sizeof (Int16); // Length Of Code
                        byteSize += sizeof (Int64); // Length Of Timestamp

                        byteSize += 4; // Length of Array
                        byteSize += sizeof (Int32) * ListOfMethodSettings.Count;

                        byteSize += 4; // Length of Array
                        foreach ( var sItem in ListOfMethods ) {
                                var sBufferListOfMethods_item = System.Text.UnicodeEncoding.Unicode.GetBytes (sItem);
                                byteSize += sizeof (System.Int32); // Length Bytes
                                byteSize += sizeof (System.Int64); // Hash Bytes
                                byteSize += sBufferListOfMethods_item.Length + 2; // StringLength Bytes
                        }

                        byteSize += sizeof (short); // Length Of Terminator

                        var buffer = new List<byte> (byteSize);
                        buffer.AddRange (BitConverter.GetBytes (byteSize)); // 4 bytes for size, 2 byte for code, 8 bytes for data, 8 bytes for data, 8 bytes for TS, 2 bytes for term
                        buffer.AddRange (BitConverter.GetBytes (Code));
                        buffer.AddRange (BitConverter.GetBytes (TimeStamp.ToFileTimeUtc ()));

                        buffer.AddRange (BitConverter.GetBytes (ListOfMethodSettings.Count)); // Count of List
                        foreach ( var ListOfMethodSettings_item in ListOfMethodSettings ) {
                                buffer.AddRange (BitConverter.GetBytes ((int)ListOfMethodSettings_item));
                        }

                        buffer.AddRange (BitConverter.GetBytes (ListOfMethods.Count)); // Count of List
                        foreach ( var ListOfMethods_item in ListOfMethods ) {
                                var sBufferListOfMethods_item = System.Text.UnicodeEncoding.Unicode.GetBytes (ListOfMethods_item);
                                buffer.AddRange (BitConverter.GetBytes (ListOfMethods_item.Length + 1));
                                buffer.AddRange (hashhelper.ComputeHash (sBufferListOfMethods_item));
                                buffer.AddRange (sBufferListOfMethods_item);
                                buffer.AddRange (BitConverter.GetBytes ((short)0));
                        }

                        buffer.AddRange (BitConverter.GetBytes ((short)0));
                        return buffer.ToArray ();
                }
        }

}

