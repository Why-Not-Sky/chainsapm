<#@ template language="C#" #> 
<#@ import namespace="System.Collections.Generic" #>
<#+
protected string TypeMapper(string typeName, Dictionary<string, string> TypeMapping) {

	if (TypeMapping.ContainsKey(typeName)) 
		return TypeMapping[typeName].ToString(); 

	return typeName; 
}

private void CreateStringListing(string varName, bool isForLoop) 
{
	var szt = isForLoop ? string.Empty : "size_t ";
	varName = isForLoop ? varName + "item" : varName;
	if (isForLoop)
		WriteLine("{0}strlen_{1} = item.length();", szt, varName);
	else
		WriteLine("{0}strlen_{1} = {1}.length();", szt, varName);
	WriteLine("{0}strbytes_{1} = (strlen_{1} * sizeof(wchar_t)) + sizeof(wchar_t);", szt, varName);
#>
size += sizeof(__int32); // String Length 
size += sizeof(__int64); // String Hash
size += strbytes_<#= varName #>; // String Bytes
<#+
}

protected void CreateCppLength(ClassProperty cpItem, Dictionary<string, string> TypeMapping)
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	
	if (typeName.ToLower() == "std::wstring")
	{ 	
		CreateStringListing(cpItem.Name, false);
		WriteLine("");
	} else { 
#>
size += sizeof(<#= typeName #>); // Size of <#= cpItem.Name #>

<#+
	}
}

protected void CreateForLoopForString(string varName) {
#>

size_t strlen_<#= varName #>item = 0;
size_t strbytes_<#= varName #>item = 0;
for (auto item : <#= varName #>) {
<#+
}


protected void CreateForLoopForTypeData(string varName) {
#>

for (auto item : <#= varName #>) {
<#+
}

protected void CreateCppLengthListOrArray(ClassProperty cpItem, Dictionary<string, string> TypeMapping) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);

	if (typeName.ToLower() == "std::wstring")
	{ 	
		CreateForLoopForString(cpItem.Name);
		PushIndent("    "); 
		CreateStringListing(cpItem.Name, true);
		PopIndent(); 
		WriteLine("}"); // Terminating brace for for loop
		WriteLine(""); // Extra space for clarity
	} else { 
#>
size += sizeof(<#= typeName #>) * <#= cpItem.Name #>.size(); // Size of <#= cpItem.Name #> vector

<#+
	}
}

protected void CreateCppStringData(string varName, bool isForLoop)
{
	var szt = isForLoop ? string.Empty : "size_t ";
	varName = isForLoop ? varName + "item" : varName;
	if (isForLoop)
		WriteLine("{0}strlen_{1} = item.length();", szt, varName);
	else
		WriteLine("{0}strlen_{1} = {1}.length();", szt, varName);
	Write("{0}strbytes_{1} = (strlen_{1} * sizeof(wchar_t)) + sizeof(wchar_t);", szt, varName);

	if (isForLoop)
		WriteLine("hashout = hash(item);");
	else
		WriteLine("hashout = hash({0});", varName);
#> 

memcpy(v2, &strlen_<#= varName #>, sizeof(__int32));
v2 += sizeof(__int32);
memcpy(v2, &hashout, sizeof(size_t));
v2 += sizeof(__int64);
<#+
if (isForLoop)
		WriteLine("memcpy(v2, item.data(), strbytes_{0});", varName);
	else
		WriteLine("memcpy(v2, {0}.data(), strbytes_{0});", varName);
#>
v2 += strbytes_<#= varName #>;
<#+
}

protected void CreateCppTypeData(string typeName, string varName, bool isForLoop) {
if (isForLoop)
	{
#> 
memcpy(v2, &<#= varName #>, sizeof(<#= typeName #>));
<#+
	} else {
#>
memcpy(v2, &<#= varName #>, sizeof(<#= typeName #>));
<#+
	}
#> 
v2 += sizeof(<#= typeName #>);
<#+
}

protected void CreateCppDataInsert(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (typeName.ToLower() == "std::wstring") {
		CreateCppStringData(cpItem.Name, false);
	} else { 
		CreateCppTypeData(typeName, cpItem.Name, false);
	} 
}

protected void CreateCppDataInsertForList(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (typeName.ToLower() == "std::wstring") {
		CreateForLoopForString(cpItem.Name);
		PushIndent("    "); 
		CreateCppStringData(cpItem.Name, true);
	} else { 
		
		CreateForLoopForTypeData(cpItem.Name);
		PushIndent("    "); 
		CreateCppTypeData(typeName, "item", true);
	} 
	PopIndent(); 
	WriteLine("}"); // Terminating brace for for loop
	WriteLine(""); // Extra space for clarity
}

protected void CreateCppSignature(ClassProperty cpItem, Dictionary<string, string> TypeMapping, bool isNotLast) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (cpItem.IsList == true | cpItem.IsArray == true) {
		CreateCppVariable(string.Format("std::vector<{0}>", typeName), cpItem.Name.ToLower());
	} else {
		CreateCppVariable(typeName, cpItem.Name.ToLower());
	}
	if (isNotLast)
		Write(", ");
	
}

protected void CreateCppDeclaration(ClassProperty cpItem, Dictionary<string, string> TypeMapping) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (cpItem.IsList == true | cpItem.IsArray == true) {
		CreateCppVariable(string.Format("std::vector<{0}>", typeName), cpItem.Name); 
	} else {
		CreateCppVariable(typeName, cpItem.Name);
	}
	WriteLine(";");
}

protected void CreateCppVariable(string typeName, string varName) 
{
	Write (string.Format("{0} {1}", typeName, varName)); 
}

protected void CreateCppInitializers(ClassProperty cpItem, bool isNotLast) {
	Write("{0}({1})", cpItem.Name, cpItem.Name.ToLower());
	if (isNotLast)
		Write(", ");
}
#>