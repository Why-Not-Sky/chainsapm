/**************************************************************************************** 
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
#pragma once
#include "stdafx.h"
#include "SendListOfMethods.h"
 

namespace Commands
{
	SendListOfMethods::SendListOfMethods(__int64 timestamp, std::vector<MethodSettings> listofmethodsettings, std::vector<std::wstring> listofmethods)
		: timestamp(timestamp), ListOfMethodSettings(listofmethodsettings), ListOfMethods(listofmethods), code(0xc8)
	{
	}

	SendListOfMethods::~SendListOfMethods()
	{
	}

	std::wstring SendListOfMethods::Name()
	{
		return L"SendListOfMethods";
	}

	std::wstring SendListOfMethods::Description()
	{
		return L"Update Command Description";
	}

	std::shared_ptr<std::vector<char>> SendListOfMethods::Encode()
	{
		if (!hasEncoded)
		{
			// The following items will be resued 
			auto hash = std::hash<std::wstring>();
			size_t hashout = 0;		// Temp var for string hashes
			size_t strlen = 0;		// Temp var for string length
			size_t strbytes = 0;	// Temp var for string bytes

			size_t size = sizeof(__int32)	// len
				+ sizeof(short)				// code
				+ sizeof(__int64);			// timestamp

			// Begin the dynamically generated sizes
			size += sizeof(MethodSettings) * ListOfMethodSettings.size(); // Size of ListOfMethodSettings vector
			
			
			size_t strlen_ListOfMethodsitemlen = 0;
			size_t strbytes_ListOfMethodsitemlen = 0;
			for (auto item : ListOfMethods) {
			    strlen_ListOfMethodsitemlen = item.length();
			    strbytes_ListOfMethodsitemlen = (strlen_ListOfMethodsitemlen * sizeof(wchar_t)) + sizeof(wchar_t);
			    size += sizeof(__int32); // String Length 
			    size += sizeof(__int64); // String Hash
			    size += strbytes_ListOfMethodsitemlen; // String Bytes
			}

			// End the dynamically generated sizes  
			size += sizeof(short);	//Terminator

			auto vector = new char[size]; 
			short term = 0;
			
			// 
			auto v2 = (char*)memcpy(vector, &size, sizeof(__int32));  
			v2 += sizeof(__int32); 
			memcpy(v2, &code, sizeof(short));
			v2 += sizeof(short);
			memcpy(v2, &timestamp, sizeof(__int64));
			v2 += sizeof(__int64);

			// Begin the dynamically generated byte copies   
			
			for (auto item : ListOfMethodSettings) {
			     
			    memcpy(v2, &item, sizeof(MethodSettings));  
			    v2 += sizeof(MethodSettings); }

			
			size_t strlen_ListOfMethodsitemdata = 0;
			size_t strbytes_ListOfMethodsitemdata = 0;
			for (auto item : ListOfMethods) {
			    strlen_ListOfMethodsitemdata = item.length();
			    strbytes_ListOfMethodsitemdata = (strlen_ListOfMethodsitemdata * sizeof(wchar_t)) + sizeof(wchar_t);
			    hashout = hash(item);
			     
			    
			    memcpy(v2, &strlen_ListOfMethodsitemdata, sizeof(__int32));
			    v2 += sizeof(__int32);
			    memcpy(v2, &hashout, sizeof(size_t));
			    v2 += sizeof(__int64);
			    memcpy(v2, item.data(), strbytes_ListOfMethodsitemdata);
			    v2 += strbytes_ListOfMethodsitemdata;
			}

			// End the dynamically generated byte copies

			// Terminator
			memcpy(v2, &term, sizeof(short));
			v2 += sizeof(short);

			hasEncoded = true;

			internalvector = std::make_shared<std::vector<char>>(vector, v2);
		}
		return internalvector;
	}

	std::shared_ptr<ICommand> SendListOfMethods::Decode(std::shared_ptr<std::vector<char>> &data)      
	{
		auto hash = std::hash<std::wstring>();

		auto ptr = data->data();

		auto len = *(unsigned int*)ptr;  
		ptr += sizeof(unsigned int);

		auto code = *(short*)ptr;
		ptr += sizeof(short);

		auto local_timestamp = *(__int64*)ptr;
		ptr += sizeof(__int64);

		
		size_t ListOfMethodSettings_count = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto local_ListOfMethodSettings = std::vector<MethodSettings>();
		
		for (size_t iListOfMethodSettings = 0; iListOfMethodSettings < ListOfMethodSettings_count; iListOfMethodSettings++) {
		    auto value = *(MethodSettings*)ptr;
		    ptr += sizeof(MethodSettings); 
		    local_ListOfMethodSettings.emplace_back(value);
		}

		
		size_t ListOfMethods_count = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto local_ListOfMethods = std::vector<std::wstring>();
		
		for (size_t iListOfMethods = 0; iListOfMethods < ListOfMethods_count; iListOfMethods++) {
		    
		    auto strlenListOfMethods = *(__int32*)ptr;
		    ptr += sizeof(__int32);
		    
		    auto hashListOfMethods = *(__int64*)ptr;
		    ptr += sizeof(__int64);
		    
		    auto str = (wchar_t*)ptr;
		    ptr += (strlenListOfMethods * 2);
		    local_ListOfMethods.emplace_back(str);
		}


		// Terminator
		auto term = *(short*)ptr;
		ptr += sizeof(short);
		return std::make_shared<SendListOfMethods>(local_timestamp,  local_ListOfMethodSettings ,  local_ListOfMethods );
	}
}

